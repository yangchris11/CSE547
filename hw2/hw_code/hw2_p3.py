# -*- coding: utf-8 -*-
"""hw2_p3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WX5VYPPA6zbUEFa5F3H6WcPawZkRbdAo
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd

import matplotlib
import matplotlib.pyplot as plt
# %matplotlib inline
matplotlib.rcParams['figure.dpi']= 150

"""# Initialization

Here we assume $f = 5$ and $λ = 0.1$. For initialization, set $X_0$ as a matrix with all elements $= 0.5$ and $Y_0$ as a zero matrix. Run your program for $1000$ iteration.
"""

n_iters = 1000
n_user = 100
n_item = 100

f = 5
_lambda = 0.1

"""#  Sparsity Ratio $α$"""

data_small = pd.read_csv('user_artists_small.txt', sep = "\t", header=0, names=['userID', 'artistID', 'interactions'])
data_synthetic = pd.read_csv('user_artists_synthetic.txt', sep = "\t", header=0, names=['userID', 'artistID', 'interactions'])

alpha_small = len(data_small) / ((n_user * n_item) - len(data_small))
alpha_synthetic = len(data_synthetic) / (n_user * n_item - len(data_synthetic))

"""# Dataset: `user_artists_small.txt`"""

C = np.zeros((n_user, n_item))
P = np.zeros((n_user, n_item))
for idx, row in data_small.iterrows():
    C[row['userID']][row['artistID']] = row['interactions']
    if row['interactions'] > 0:
        P[row['userID']][row['artistID']] = 1.0 
C = C * alpha_small + 1

"""## Update $y_i$

$\mathbf{y}_i = \big( \mathbf{X}^T  \mathbf{X} + \mathbf{X}^T (\textbf{C}_{i} - \mathbf{I})\mathbf{X} +  \lambda \mathbf{I}  \big)^{-1} \mathbf{X}^T \textbf{C}_{i} p(i) $


## Update $x_u$

$\mathbf{x}_u = \big( \mathbf{Y}^T  \mathbf{Y} + \mathbf{Y}^T (\textbf{C}_{u} - \mathbf{I})\mathbf{Y} +  \lambda \mathbf{I}  \big)^{-1} \mathbf{Y}^T \textbf{C}_{u} p(u) $
"""

X = np.full((n_user, f), 0.5)
Y = np.full((n_item, f), 0.0)
c_implicit_history = []
lambda_I = _lambda * np.eye(f)

for iter in range(n_iters):
    # step0: precompose XtX
    Xt_X = np.matmul(X.T, X)

    # step1: update item matrix Y
    for i in range(n_item):

        Ci = np.diag(C[:,i])
        Ci_minus_I = Ci - np.eye(n_item)

        Xt_Ci_pi = np.matmul(X.T, np.multiply(C[:,i], P[:,i]))

        Y[i,:] = np.matmul(np.linalg.inv(Xt_X + np.matmul(np.matmul(X.T, Ci_minus_I), X) + lambda_I), Xt_Ci_pi)

    # step0: precompose YtY
    Yt_Y = np.matmul(Y.T, Y)
    # step2: update item matrix Y
    for u in range(n_user):
        
        Cu = np.diag(C[u,:])
        Cu_minus_I = Cu - np.eye(n_user)

        Yt_Cu_pu = np.matmul(Y.T, np.multiply(C[u,:], P[u,:]))

        X[u,:] = np.matmul(np.linalg.inv(Yt_Y + np.matmul(np.matmul(Y.T, Cu_minus_I), Y) + lambda_I), Yt_Cu_pu)

    # step3: Caculate C_implicit
    preds = np.matmul(X, Y.T)
    c_implicit = np.sum(np.multiply(C, np.square(P - preds))) + _lambda * (np.sum(np.square(X)) + np.sum(np.square(Y)))

    c_implicit_history.append(c_implicit)

    if iter <= 9 or iter % 100 == 99:
        print("Iter {:3d}:\t C_implicit: {}\t\t p(30,83): {}".format(iter+1, c_implicit, preds[30, 83]))

plt.figure()
plt.plot(np.array(c_implicit_history), c='red')
plt.xlabel('Iterations')
plt.ylabel(r'$C_{implicit}$')
plt.title(r'$C_{implicit}$' + ' (user_artist_small.txt)')

"""# Dataset: `user_artists_synthetic.txt`"""

C = np.zeros((n_user, n_item))
P = np.zeros((n_user, n_item))
for idx, row in data_synthetic.iterrows():
    C[row['userID']][row['artistID']] = row['interactions']
    if row['interactions'] > 0:
        P[row['userID']][row['artistID']] = 1.0 
C = C * alpha_synthetic + 1

X = np.full((n_user, f), 0.5)
Y = np.full((n_item, f), 0.0)
c_implicit_history = []
lambda_I = _lambda * np.eye(f)

for iter in range(n_iters):
    # step0: precompose XtX and YtY
    Xt_X = np.matmul(X.T, X)

    # step1: update item matrix Y
    for i in range(n_item):

        Ci = np.diag(C[:,i])
        Ci_minus_I = Ci - np.eye(n_item)

        Xt_Ci_pi = np.matmul(X.T, np.multiply(C[:,i], P[:,i]))

        Y[i,:] = np.matmul(np.linalg.inv(Xt_X + np.matmul(np.matmul(X.T, Ci_minus_I), X) + lambda_I), Xt_Ci_pi)

    Yt_Y = np.matmul(Y.T, Y)
    # step2: update item matrix Y
    for u in range(n_user):
        
        Cu = np.diag(C[u,:])
        Cu_minus_I = Cu - np.eye(n_user)

        Yt_Cu_pu = np.matmul(Y.T, np.multiply(C[u,:], P[u,:]))

        X[u,:] = np.matmul(np.linalg.inv(Yt_Y + np.matmul(np.matmul(Y.T, Cu_minus_I), Y) + lambda_I), Yt_Cu_pu)

    # step3: Caculate C_implicit
    preds = np.matmul(X, Y.T)
    c_implicit = np.sum(np.multiply(C, np.square(P - preds))) + _lambda * (np.sum(np.square(X)) + np.sum(np.square(Y)))

    c_implicit_history.append(c_implicit)

    if iter <= 9 or iter % 100 == 99:
        print("Iter {:3d}:\t C_implicit: {}\t\t p(30,83): {}".format(iter+1, c_implicit, preds[30, 83]))

plt.figure()
plt.plot(np.array(c_implicit_history), c='red')
plt.xlabel('Iterations')
plt.ylabel(r'$C_{implicit}$')
plt.title(r'$C_{implicit}$' + ' (user_artist_synthetic.txt)')